// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/tcp-emitter/routing_table"
)

type FakeEmitter struct {
	EmitStub        func(routingEvents routing_table.RoutingEvents) error
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		routingEvents routing_table.RoutingEvents
	}
	emitReturns struct {
		result1 error
	}
}

func (fake *FakeEmitter) Emit(routingEvents routing_table.RoutingEvents) error {
	fake.emitMutex.Lock()
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		routingEvents routing_table.RoutingEvents
	}{routingEvents})
	fake.emitMutex.Unlock()
	if fake.EmitStub != nil {
		return fake.EmitStub(routingEvents)
	} else {
		return fake.emitReturns.result1
	}
}

func (fake *FakeEmitter) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeEmitter) EmitArgsForCall(i int) routing_table.RoutingEvents {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return fake.emitArgsForCall[i].routingEvents
}

func (fake *FakeEmitter) EmitReturns(result1 error) {
	fake.EmitStub = nil
	fake.emitReturns = struct {
		result1 error
	}{result1}
}

var _ routing_table.Emitter = new(FakeEmitter)
