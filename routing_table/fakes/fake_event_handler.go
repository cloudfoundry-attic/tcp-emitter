// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/receptor"
	"github.com/cloudfoundry-incubator/tcp-emitter/routing_table"
)

type FakeEventHandler struct {
	HandleEventStub        func(event receptor.Event)
	handleEventMutex       sync.RWMutex
	handleEventArgsForCall []struct {
		event receptor.Event
	}
	SyncStub        func()
	syncMutex       sync.RWMutex
	syncArgsForCall []struct{}
	SyncingStub        func() bool
	syncingMutex       sync.RWMutex
	syncingArgsForCall []struct{}
	syncingReturns struct {
		result1 bool
	}
}

func (fake *FakeEventHandler) HandleEvent(event receptor.Event) {
	fake.handleEventMutex.Lock()
	fake.handleEventArgsForCall = append(fake.handleEventArgsForCall, struct {
		event receptor.Event
	}{event})
	fake.handleEventMutex.Unlock()
	if fake.HandleEventStub != nil {
		fake.HandleEventStub(event)
	}
}

func (fake *FakeEventHandler) HandleEventCallCount() int {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return len(fake.handleEventArgsForCall)
}

func (fake *FakeEventHandler) HandleEventArgsForCall(i int) receptor.Event {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return fake.handleEventArgsForCall[i].event
}

func (fake *FakeEventHandler) Sync() {
	fake.syncMutex.Lock()
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct{}{})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		fake.SyncStub()
	}
}

func (fake *FakeEventHandler) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeEventHandler) Syncing() bool {
	fake.syncingMutex.Lock()
	fake.syncingArgsForCall = append(fake.syncingArgsForCall, struct{}{})
	fake.syncingMutex.Unlock()
	if fake.SyncingStub != nil {
		return fake.SyncingStub()
	} else {
		return fake.syncingReturns.result1
	}
}

func (fake *FakeEventHandler) SyncingCallCount() int {
	fake.syncingMutex.RLock()
	defer fake.syncingMutex.RUnlock()
	return len(fake.syncingArgsForCall)
}

func (fake *FakeEventHandler) SyncingReturns(result1 bool) {
	fake.SyncingStub = nil
	fake.syncingReturns = struct {
		result1 bool
	}{result1}
}

var _ routing_table.EventHandler = new(FakeEventHandler)
